import ast
import astunparse

# Original code with white spaces and excess empty lines
code_with_spaces_and_empty_lines = """
# 3-say_my_name.txt


===========================

How to Use 3-say_my_name.py

===========================


This modules defines a function ``say_my_name(first_name, last_name="")``.


Usage

=====


``say_my_name(...)`` prints "My name is <first_name> <last_name>".


::


    >>> say_my_name = __import__('3-say_my_name').say_my_name

    >>> say_my_name("Brennan", "Baraban")

    My name is Brennan Baraban


::


    >>> say_my_name("Cornelius Maxwell", "Jones II")

    My name is Cornelius Maxwell Jones II


The parameter ```last_name``` is optional. If no last name is provided,

an empty string is printed instead.


::


    >>> say_my_name("Brennan")

    My name is Brennan


Invalid Names

=============


The parameters ``first_name`` and ``last_name``` must be strings. Otherwise,

a TypeError is raised.


::


    >>> say_my_name(6, "James")

    Traceback (most recent call last):

    TypeError: first_name must be a string


::


    >>> say_my_name("LeBron", ["Cavs", "Lakers", "Heat"])

    Traceback (most recent call last):

    TypeError: last_name must be a string


::


    >>> say_my_name({"LeBron": 6, "James": 23}, 7.7)

    Traceback (most recent call last):

    TypeError: first_name must be a string


::


    >>> say_my_name(None)

    Traceback (most recent call last):

    TypeError: first_name must be a string


At least one name must be provided.


::


    >>> say_my_name()

    Traceback (most recent call last):

    TypeError: say_my_name() missing 1 required positional argument:
    'first_name'


"""

# Parse the code into an Abstract Syntax Tree (AST)
parsed_code = ast.parse(code_with_spaces_and_empty_lines)


# Define a visitor class to remove white spaces and excess empty lines
class CodeCleaner(ast.NodeTransformer):
    def visit_FunctionDef(self, node):
        # Remove white spaces and excess empty lines within functions
        if node.body:
            new_body = []
            for stmt in node.body:
                if not isinstance(stmt, (ast.FunctionDef, ast.ClassDef)):
                    # Preserve non-function and non-class statements
                    if isinstance(stmt, ast.Expr):
                        # Remove multiple empty lines within expressions
                        new_body.append(ast.Expr(ast.Str("")))
                    else:
                        new_body.append(stmt)
            node.body = new_body
        return node

    def visit(self, node):
        if not isinstance(node, ast.FunctionDef):
            # Remove spaces from other parts of the code
            ast.fix_missing_locations(node)
            return node
        return self.generic_visit(node)


# Apply the visitor to remove white spaces and excess empty lines
cleaned_code = CodeCleaner().visit(parsed_code)

# Convert the modified AST back to code
code_without_spaces_and_empty_lines = astunparse.unparse(cleaned_code)

# Print the code without white spaces and excess empty lines
print(code_without_spaces_and_empty_lines)

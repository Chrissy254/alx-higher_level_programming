import ast
import astunparse

# Original code with white spaces and excess empty lines
code_with_spaces_and_empty_lines = """
# 5-text_indentation.txt


================================

How to Use 5-text_indentation.py

================================


This module defines a text-indentation function ``text_indentation(text)``.


Usage

=====


Text is printed with two new lines after each of the characters ``.``, ``?``,

and ``:``.


::


    >>> text_indentation = __import__('5-text_indentation').text_indentation

    >>> text_indentation("Hello?")

    Hello?

    <BLANKLINE>


No spaces are printed at the beginning of a line.


::


    >>> text_indentation("   Hi there.")

    Hi there.

    <BLANKLINE>


::


    >>> text_indentation("          ")


Similarly, no spaces are printed at the end of each printed line.


::


    >>> text_indentation("Hello.   ")

    Hello.

    <BLANKLINE>


::


    >>> text_indentation("    Woah now.    This is messy.   ")

    Woah now.

    <BLANKLINE>

    This is messy.

    <BLANKLINE>


New lines are only printed for the characters ``.``, ``?``, and ``:`` -

text not ending with one of these characters is not ended with a new line.


::


    >>> text_indentation("No ending period, what bad grammar")

    No ending period, what bad grammar


New lines within a string are printed as normal.


::


    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")

    Let's print a new-line! Here goes:

    <BLANKLINE>

    <BLANKLINE>

    Printed.

    <BLANKLINE>


::


    >>> text_indentation("\n\n\n We just printed three new lines.")

    <BLANKLINE>

    <BLANKLINE>

    <BLANKLINE>

    We just printed three new lines.

    <BLANKLINE>


::

    >>> text_indentation("A sneaky \n new line.")

    A sneaky

    new line.

    <BLANKLINE>


A combo example:


::


    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing "

    ... "elit. Quonam modo? Utrum igitur tibi litteram
    videor an totas paginas "

    ... "commovere? Non autem hoc: igitur ne illud quidem.
    Fortasse id optimum, "

    ... "sed ubi illud: Plus semper voluptatis? Teneo,
    inquit, finem illi videri "

    ... "nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est "

    ... "moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde "

    ... "sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid "

    ... "voles, postea. Quae animi affectio suum cuique tribuens atque hanc, "

    ... "quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas "

    ... "videres") # doctest: +NORMALIZE_WHITESPACE

    Lorem ipsum dolor sit amet, consectetur adipiscing elit.

    <BLANKLINE>

    Quonam modo?

    <BLANKLINE>

    Utrum igitur tibi litteram videor an totas paginas commovere?

    <BLANKLINE>

    Non autem hoc:

    <BLANKLINE>

    igitur ne illud quidem.

    <BLANKLINE>

    Fortasse id optimum, sed ubi illud:

    <BLANKLINE>

    Plus semper voluptatis?

    <BLANKLINE>

    Teneo, inquit, finem illi videri nihil dolere.

    <BLANKLINE>

    Transfer idem ad modestiam vel temperantiam,

    quae est moderatio cupiditatum rationi oboediens.

    <BLANKLINE>

    Si id dicis, vicimus.

    <BLANKLINE>

    Inde sermone vario sex illa a Dipylo stadia confecimus.

    <BLANKLINE>

    Sin aliud quid voles, postea.

    <BLANKLINE>

    Quae animi affectio suum cuique tribuens atque hanc, quam dico.

    <BLANKLINE>

    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres


Invalid Text

============


The paramter ``text`` must be a string. Otherwise, a TypeError is raised.


::


    >>> text_indentation(7)

    Traceback (most recent call last):

    TypeError: text must be a string


::


    >>> text_indentation({"one": 1, "two": 2})

    Traceback (most recent call last):

    TypeError: text must be a string


::


    >>> text_indentation(None)

    Traceback (most recent call last):

    TypeError: text must be a string

"""

# Parse the code into an Abstract Syntax Tree (AST)
parsed_code = ast.parse(code_with_spaces_and_empty_lines)


# Define a visitor class to remove white spaces and excess empty lines
class CodeCleaner(ast.NodeTransformer):
    def visit_FunctionDef(self, node):
        # Remove white spaces and excess empty lines within functions
        if node.body:
            new_body = []
            for stmt in node.body:
                if not isinstance(stmt, (ast.FunctionDef, ast.ClassDef)):
                    # Preserve non-function and non-class statements
                    if isinstance(stmt, ast.Expr):
                        # Remove multiple empty lines within expressions
                        new_body.append(ast.Expr(ast.Str("")))
                    else:
                        new_body.append(stmt)
            node.body = new_body
        return node

    def visit(self, node):
        if not isinstance(node, (ast.FunctionDef, ast.ClassDef)):
            # Remove spaces from other parts of the code
            ast.fix_missing_locations(node)
            return node
        return self.generic_visit(node)


# Apply the visitor to remove white spaces and excess empty lines
cleaned_code = CodeCleaner().visit(parsed_code)

# Convert the modified AST back to code
code_without_spaces_and_empty_lines = astunparse.unparse(cleaned_code)

# Print the code without white spaces and excess empty lines
print(code_without_spaces_and_empty_lines)
